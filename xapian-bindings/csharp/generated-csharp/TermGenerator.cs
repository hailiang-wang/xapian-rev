//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.13
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xapian {

public class TermGenerator : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal TermGenerator(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TermGenerator obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~TermGenerator() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          XapianPINVOKE.delete_TermGenerator(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public TermGenerator() : this(XapianPINVOKE.new_TermGenerator(), true) {
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetStemmer(Stem stemmer) {
    XapianPINVOKE.TermGenerator_SetStemmer(swigCPtr, Stem.getCPtr(stemmer));
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetStopper(Stopper stop) {
    XapianPINVOKE.TermGenerator_SetStopper__SWIG_0(swigCPtr, Stopper.getCPtr(stop));
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetStopper() {
    XapianPINVOKE.TermGenerator_SetStopper__SWIG_1(swigCPtr);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDocument(Document doc) {
    XapianPINVOKE.TermGenerator_SetDocument(swigCPtr, Document.getCPtr(doc));
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public Document GetDocument() {
    Document ret = new Document(XapianPINVOKE.TermGenerator_GetDocument(swigCPtr), false);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetDatabase(WritableDatabase db) {
    XapianPINVOKE.TermGenerator_SetDatabase(swigCPtr, WritableDatabase.getCPtr(db));
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public int SetFlags(int toggle, int mask) {
    int ret = XapianPINVOKE.TermGenerator_SetFlags__SWIG_0(swigCPtr, toggle, mask);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetFlags(int toggle) {
    int ret = XapianPINVOKE.TermGenerator_SetFlags__SWIG_1(swigCPtr, toggle);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetStemmingStrategy(TermGenerator.stem_strategy strategy) {
    XapianPINVOKE.TermGenerator_SetStemmingStrategy(swigCPtr, (int)strategy);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetStopperStrategy(TermGenerator.stop_strategy strategy) {
    XapianPINVOKE.TermGenerator_SetStopperStrategy(swigCPtr, (int)strategy);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMaxWordLength(uint max_word_length) {
    XapianPINVOKE.TermGenerator_SetMaxWordLength(swigCPtr, max_word_length);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public void IndexText(string text, uint wdf_inc, string prefix) {
    XapianPINVOKE.TermGenerator_IndexText__SWIG_0(swigCPtr, text, wdf_inc, prefix);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public void IndexText(string text, uint wdf_inc) {
    XapianPINVOKE.TermGenerator_IndexText__SWIG_1(swigCPtr, text, wdf_inc);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public void IndexText(string text) {
    XapianPINVOKE.TermGenerator_IndexText__SWIG_2(swigCPtr, text);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public void IndexTextWithoutPositions(string text, uint wdf_inc, string prefix) {
    XapianPINVOKE.TermGenerator_IndexTextWithoutPositions__SWIG_0(swigCPtr, text, wdf_inc, prefix);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public void IndexTextWithoutPositions(string text, uint wdf_inc) {
    XapianPINVOKE.TermGenerator_IndexTextWithoutPositions__SWIG_1(swigCPtr, text, wdf_inc);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public void IndexTextWithoutPositions(string text) {
    XapianPINVOKE.TermGenerator_IndexTextWithoutPositions__SWIG_2(swigCPtr, text);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public void IncreaseTermpos(uint delta) {
    XapianPINVOKE.TermGenerator_IncreaseTermpos__SWIG_0(swigCPtr, delta);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public void IncreaseTermpos() {
    XapianPINVOKE.TermGenerator_IncreaseTermpos__SWIG_1(swigCPtr);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint GetTermPos() {
    uint ret = XapianPINVOKE.TermGenerator_GetTermPos(swigCPtr);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetTermpos(uint termpos) {
    XapianPINVOKE.TermGenerator_SetTermpos(swigCPtr, termpos);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public string GetDescription() {
    string ret = XapianPINVOKE.TermGenerator_GetDescription(swigCPtr);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static readonly int FLAG_SPELLING = XapianPINVOKE.TermGenerator_FLAG_SPELLING_get();
  public static readonly int FLAG_CJK_NGRAM = XapianPINVOKE.TermGenerator_FLAG_CJK_NGRAM_get();

  public enum stem_strategy {
    STEM_NONE,
    STEM_SOME,
    STEM_ALL,
    STEM_ALL_Z,
    STEM_SOME_FULL_POS
  }

  public enum stop_strategy {
    STOP_NONE,
    STOP_ALL,
    STOP_STEMMED
  }

}

}
