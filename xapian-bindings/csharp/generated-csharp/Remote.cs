//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.13
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xapian {

public class Remote : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Remote(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Remote obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static Database Open(string host, uint port, uint timeout, uint connect_timeout) {
    Database ret = new Database(XapianPINVOKE.Remote_Open__SWIG_0(host, port, timeout, connect_timeout), true);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Database Open(string host, uint port, uint timeout) {
    Database ret = new Database(XapianPINVOKE.Remote_Open__SWIG_1(host, port, timeout), true);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Database Open(string host, uint port) {
    Database ret = new Database(XapianPINVOKE.Remote_Open__SWIG_2(host, port), true);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static WritableDatabase OpenWritable(string host, uint port, uint timeout, uint connect_timeout) {
    WritableDatabase ret = new WritableDatabase(XapianPINVOKE.Remote_OpenWritable__SWIG_0(host, port, timeout, connect_timeout), true);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static WritableDatabase OpenWritable(string host, uint port, uint timeout) {
    WritableDatabase ret = new WritableDatabase(XapianPINVOKE.Remote_OpenWritable__SWIG_1(host, port, timeout), true);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static WritableDatabase OpenWritable(string host, uint port) {
    WritableDatabase ret = new WritableDatabase(XapianPINVOKE.Remote_OpenWritable__SWIG_2(host, port), true);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Database Open(string program, string args, uint timeout) {
    Database ret = new Database(XapianPINVOKE.Remote_Open__SWIG_3(program, args, timeout), true);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Database Open(string program, string args) {
    Database ret = new Database(XapianPINVOKE.Remote_Open__SWIG_4(program, args), true);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static WritableDatabase OpenWritable(string program, string args, uint timeout) {
    WritableDatabase ret = new WritableDatabase(XapianPINVOKE.Remote_OpenWritable__SWIG_3(program, args, timeout), true);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static WritableDatabase OpenWritable(string program, string args) {
    WritableDatabase ret = new WritableDatabase(XapianPINVOKE.Remote_OpenWritable__SWIG_4(program, args), true);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
