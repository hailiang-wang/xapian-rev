/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.13
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_Xapian_WRAP_H_
#define SWIG_Xapian_WRAP_H_

class SwigDirector_StemImplementation : public Xapian::StemImplementation, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_StemImplementation(JNIEnv *jenv);
    virtual ~SwigDirector_StemImplementation();
    virtual std::string operator ()(std::string const &word);
    virtual std::string get_description() const;
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<2> swig_override;
};

class SwigDirector_MatchDecider : public Xapian::MatchDecider, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_MatchDecider(JNIEnv *jenv);
    virtual bool operator ()(Xapian::Document const &doc) const;
    virtual ~SwigDirector_MatchDecider();
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_ExpandDecider : public Xapian::ExpandDecider, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_ExpandDecider(JNIEnv *jenv);
    virtual bool operator ()(std::string const &term) const;
    virtual ~SwigDirector_ExpandDecider();
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_KeyMaker : public Xapian::KeyMaker, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_KeyMaker(JNIEnv *jenv);
    virtual std::string operator ()(Xapian::Document const &doc) const;
    virtual ~SwigDirector_KeyMaker();
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_Stopper : public Xapian::Stopper, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_Stopper(JNIEnv *jenv);
    virtual bool operator ()(std::string const &term) const;
    virtual ~SwigDirector_Stopper();
    virtual std::string get_description() const;
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<2> swig_override;
};

class SwigDirector_RangeProcessor : public Xapian::RangeProcessor, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_RangeProcessor(JNIEnv *jenv);
    SwigDirector_RangeProcessor(JNIEnv *jenv, Xapian::valueno slot_, std::string const &str_ = std::string(), unsigned int flags_ = 0);
    virtual ~SwigDirector_RangeProcessor();
    virtual Xapian::Query operator ()(std::string const &begin, std::string const &end);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_ValueRangeProcessor : public Xapian::ValueRangeProcessor, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_ValueRangeProcessor(JNIEnv *jenv);
    virtual ~SwigDirector_ValueRangeProcessor();
    virtual Xapian::valueno operator ()(std::string &begin, std::string &end);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_FieldProcessor : public Xapian::FieldProcessor, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_FieldProcessor(JNIEnv *jenv);
    virtual ~SwigDirector_FieldProcessor();
    virtual Xapian::Query operator ()(std::string const &str);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_Compactor : public Xapian::Compactor, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_Compactor(JNIEnv *jenv);
    virtual ~SwigDirector_Compactor();
    virtual void set_status(std::string const &table, std::string const &status);
    virtual std::string resolve_duplicate_metadata(std::string const &key, size_t num_tags, std::string const tags[]);
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<2> swig_override;
};

class SwigDirector_PostingSource : public Xapian::PostingSource, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_PostingSource(JNIEnv *jenv);
    virtual ~SwigDirector_PostingSource();
    virtual Xapian::doccount get_termfreq_min() const;
    virtual Xapian::doccount get_termfreq_est() const;
    virtual Xapian::doccount get_termfreq_max() const;
    virtual double get_weight() const;
    virtual Xapian::docid get_docid() const;
    virtual void next(double min_wt);
    virtual void skip_to(Xapian::docid did, double min_wt);
    virtual bool check(Xapian::docid did, double min_wt);
    virtual bool at_end() const;
    virtual Xapian::PostingSource *clone() const;
    virtual std::string name() const;
    virtual std::string serialise() const;
    virtual Xapian::PostingSource *unserialise(std::string const &serialised) const;
    virtual Xapian::PostingSource *unserialise_with_registry(std::string const &serialised, Xapian::Registry const &registry) const;
    virtual void init(Xapian::Database const &db);
    virtual std::string get_description() const;
public:
    bool swig_overrides(int n) {
      return (n < 12 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<12> swig_override;
};

class SwigDirector_ValuePostingSource : public Xapian::ValuePostingSource, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_ValuePostingSource(JNIEnv *jenv, Xapian::valueno slot_);
    virtual ~SwigDirector_ValuePostingSource();
    virtual Xapian::doccount get_termfreq_min() const;
    virtual Xapian::doccount get_termfreq_est() const;
    virtual Xapian::doccount get_termfreq_max() const;
    virtual double get_weight() const;
    virtual Xapian::docid get_docid() const;
    virtual void next(double min_wt);
    virtual void skip_to(Xapian::docid min_docid, double min_wt);
    virtual bool check(Xapian::docid min_docid, double min_wt);
    virtual bool at_end() const;
    virtual Xapian::PostingSource *clone() const;
    virtual std::string name() const;
    virtual std::string serialise() const;
    virtual Xapian::PostingSource *unserialise(std::string const &serialised) const;
    virtual Xapian::PostingSource *unserialise_with_registry(std::string const &serialised, Xapian::Registry const &registry) const;
    virtual void init(Xapian::Database const &db_);
    virtual std::string get_description() const;
public:
    bool swig_overrides(int n) {
      return (n < 12 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<12> swig_override;
};

class SwigDirector_ValueWeightPostingSource : public Xapian::ValueWeightPostingSource, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_ValueWeightPostingSource(JNIEnv *jenv, Xapian::valueno slot_);
    virtual ~SwigDirector_ValueWeightPostingSource();
    virtual Xapian::doccount get_termfreq_min() const;
    virtual Xapian::doccount get_termfreq_est() const;
    virtual Xapian::doccount get_termfreq_max() const;
    virtual double get_weight() const;
    virtual Xapian::docid get_docid() const;
    virtual void next(double min_wt);
    virtual void skip_to(Xapian::docid min_docid, double min_wt);
    virtual bool check(Xapian::docid min_docid, double min_wt);
    virtual bool at_end() const;
    virtual Xapian::ValueWeightPostingSource *clone() const;
    virtual std::string name() const;
    virtual std::string serialise() const;
    virtual Xapian::ValueWeightPostingSource *unserialise(std::string const &serialised) const;
    virtual Xapian::PostingSource *unserialise_with_registry(std::string const &serialised, Xapian::Registry const &registry) const;
    virtual void init(Xapian::Database const &db_);
    virtual std::string get_description() const;
public:
    bool swig_overrides(int n) {
      return (n < 12 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<12> swig_override;
};

class SwigDirector_MatchSpy : public Xapian::MatchSpy, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_MatchSpy(JNIEnv *jenv);
    virtual ~SwigDirector_MatchSpy();
    virtual void operator ()(Xapian::Document const &doc, double wt);
    virtual Xapian::MatchSpy *clone() const;
    virtual std::string name() const;
    virtual std::string serialise() const;
    virtual Xapian::MatchSpy *unserialise(std::string const &serialised, Xapian::Registry const &context) const;
    virtual std::string serialise_results() const;
    virtual void merge_results(std::string const &serialised);
    virtual std::string get_description() const;
public:
    bool swig_overrides(int n) {
      return (n < 4 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<4> swig_override;
};

class SwigDirector_LatLongMetric : public Xapian::LatLongMetric, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_LatLongMetric(JNIEnv *jenv);
    virtual ~SwigDirector_LatLongMetric();
    virtual double pointwise_distance(Xapian::LatLongCoord const &a, Xapian::LatLongCoord const &b) const;
    virtual Xapian::LatLongMetric *clone() const;
    virtual std::string name() const;
    virtual std::string serialise() const;
    virtual Xapian::LatLongMetric *unserialise(std::string const &serialised) const;
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<2> swig_override;
};


#endif
